#include <cs50.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

bool duplicate(string keys);
bool non_alphabet(string keys);

int main(int argc, string argv[])
{
    // Check if the command line arguments is valid or not
    if (argc != 2)
    {
        printf("Usage: ./substitution key\n");
        return 1;
    }
    else if (strlen(argv[1]) != 26)
    {
        printf("Key must contain 26 characters.\n");
        return 1;
    }
    else if (duplicate(argv[1]))
    {
        printf("There must be no duplicate in the keys.\n");
        return 1;
    }
    else if (non_alphabet(argv[1]))
    {
        printf("There must be only alphabet character.\n");
        return 1;
    }

    // Get text input from user
    string plain = get_string("plaintext: ");
    // Save argv for easier declaration
    string text = argv[1];

    // Print out the cipher
    printf("ciphertext: ");
    for (int i = 0, n = strlen(plain); i < n; i++)
    {
        // For lowercase cipher
        if (islower(plain[i]))
        {
            printf("%c", tolower(text[plain[i] - 'a']));
        }
        // For uppercase cipher
        else if (isupper(plain[i]))
        {
            printf("%c", toupper(text[plain[i] - 'A']));
        }
        // For other than alphabet
        else
        {
            printf("%c", plain[i]);
        }
    }
    printf("\n");
    // Don't forget to return the value
    return 0;
}

bool duplicate(string keys)
{
    // Function for checking duplicates
    bool value = false;
    for (int i = 0, n = strlen(keys); i < n; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            if (keys[i] == keys[j])
            {
                value = true;
                break;
            }

        }
    }
    return value;
}

bool non_alphabet(string keys)
{
    // Check the keys for other char than alphabets
    bool alpha = true;
    for (int i = 0, n = strlen(keys); i < n; i++)
    {
        if (isalpha(keys[i]))
        {
            alpha = false;
        }
        else
        {
            alpha = true;
            break;
        }
    }
    return alpha;
}